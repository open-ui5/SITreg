/*

   Copyright 2016 SAP Mentors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/
namespace com.sap.sapmentors.sitreg.data;
@Schema: 'SITREG' 
context SITreg {

    type error {
        HTTP_STATUS_CODE : Integer;
        ERROR_MESSAGE    : String(100);
        DETAIL           : String(100);
    };
    
    type BusinessKey : Integer;
    type UserT : String(256);
    type RelationToSAPT : String(1);
    type SDate : LocalDate;
    type URL   : String(256);
    type RegisterAsOrganizerStatus : String(10) enum{ ACCEPTED = 'A'; REJECTED = 'R'; PENDING = 'P'; };
    
    type HistoryT {
        CreatedBy : UserT;
        CreatedAt : SDate;
        ChangedBy : UserT;
        ChangedAt : SDate;
    };
    
    type RegistrationNumbers {
        EventID      : BusinessKey;
        Free         : Integer;
        Participants : Integer;
    };

    type EventChangeable {
        EventID      : BusinessKey;
        Changeable   : Integer;
    };

    entity Event {
        key ID              : BusinessKey; 
            Location        : String(100) not null;
            EventDate       : SDate not null;
            StartTime       : UTCTimestamp;
            EndTime         : UTCTimestamp;
            MaxParticipants : Integer not null;
            HomepageURL     : URL;
            History         : HistoryT;
    };
    
    entity CoOrganizer {
        key EventID  : BusinessKey;
        key UserName : UserT;
            History  : HistoryT;
            Active   : String(1); // Y = Yes / N = No
    };

    entity RelationToSAP {
        key RelationToSAP : RelationToSAPT;
        key Language : String(2);
        Description  : String(250);
    };
    
    type ParticipantT {
            ID               : BusinessKey;
            EventID          : BusinessKey;
            RegistrationTime : UTCTimestamp;
            FirstName        : String(100);
            LastName         : String(100);
            EMail            : String(256);
            MobilePhone      : String(25);
            BioURL           : URL;
            Twitter          : String(15);
            RSVP             : String(1); // Y = Yes / N = No
            PreEveningEvent  : String(1); // Y = Yes / N = No / M = Maybe
            PostEveningEvent : String(1); // Y = Yes / N = No / M = Maybe
            RelationToSAP    : RelationToSAPT; 
            Receipt          : String(1); // Y = Yes / N = No
            ReceiptCompany   : String(256);
            ReceiptAddress   : LargeString;
            History          : HistoryT;
    };  
    
    entity Participant {
        key ID               : BusinessKey;
            EventID          : BusinessKey not null;
            RegistrationTime : UTCTimestamp;
            FirstName        : String(100) not null;
            LastName         : String(100) not null;
            EMail            : String(256) not null;
            MobilePhone      : String(25);
            BioURL           : URL;
            Twitter          : String(15);
            RSVP             : String(1) not null; // Y = Yes / N = No
            PreEveningEvent  : String(1); // Y = Yes / N = No / M = Maybe
            PostEveningEvent : String(1); // Y = Yes / N = No / M = Maybe
            RelationToSAP    : String(1); 
            Receipt          : String(1); // Y = Yes / N = No
            ReceiptCompany   : String(256);
            ReceiptAddress   : LargeString;
            History          : HistoryT;
    };
    
    entity Organizer {
        key UserName          : UserT;
            FirstName         : String(100) not null;
            LastName          : String(100) not null;
            EMail             : String(256) not null;
            MobilePhone       : String(25);
            Status            : String(1); // 
            History           : HistoryT;
    }
    
    entity RegisterAsOrganizerQueue {
        key UserName            : UserT; // Username of the maybe new Organizer
            Status              : String(1); // See enum RegisterAsOrganizerStatus // A = Accepted / R = Rejected / P = Pending
            RequestTimeStamp    : UTCTimestamp;
            StatusSetTimeStamp  : UTCTimestamp;
            History             : HistoryT;
    };
  
};